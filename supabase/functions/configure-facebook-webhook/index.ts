import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { page_token, page_id } = await req.json();
    
    if (!page_token || !page_id) {
      throw new Error('page_token e page_id s√£o obrigat√≥rios');
    }

    console.log(`üîß Configurando webhook para p√°gina ${page_id}`);

    // 1. Verificar permiss√µes atuais
    const permissionsResponse = await fetch(
      `https://graph.facebook.com/v18.0/me/permissions?access_token=${page_token}`
    );
    const permissions = await permissionsResponse.json();
    
    console.log('üìã Permiss√µes atuais:', permissions);

    // 2. Verificar detalhes da p√°gina
    const pageResponse = await fetch(
      `https://graph.facebook.com/v18.0/${page_id}?fields=name,category,verification_status&access_token=${page_token}`
    );
    const pageInfo = await pageResponse.json();
    
    console.log('üìÑ Info da p√°gina:', pageInfo);

    // 3. Verificar se a p√°gina j√° est√° subscrita aos webhooks
    const subscriptionsResponse = await fetch(
      `https://graph.facebook.com/v18.0/${page_id}/subscribed_apps?access_token=${page_token}`
    );
    const subscriptions = await subscriptionsResponse.json();
    
    console.log('üîó Subscri√ß√µes atuais:', subscriptions);

    // 4. Subscrever a p√°gina aos webhooks se n√£o estiver
    let subscriptionResult = null;
    
    if (subscriptions.data && subscriptions.data.length === 0) {
      console.log('üìù Subscrevendo p√°gina aos webhooks...');
      
      const subscribeResponse = await fetch(
        `https://graph.facebook.com/v18.0/${page_id}/subscribed_apps`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            access_token: page_token,
            subscribed_fields: 'messages,messaging_postbacks,messaging_optins,message_deliveries,message_reads'
          })
        }
      );
      
      subscriptionResult = await subscribeResponse.json();
      console.log('‚úÖ Resultado da subscri√ß√£o:', subscriptionResult);
    } else {
      console.log('‚úÖ P√°gina j√° subscrita aos webhooks');
    }

    // 5. Verificar webhook settings novamente
    const finalSubscriptionsResponse = await fetch(
      `https://graph.facebook.com/v18.0/${page_id}/subscribed_apps?access_token=${page_token}`
    );
    const finalSubscriptions = await finalSubscriptionsResponse.json();

    const result = {
      success: true,
      page_info: pageInfo,
      permissions: permissions,
      initial_subscriptions: subscriptions,
      subscription_result: subscriptionResult,
      final_subscriptions: finalSubscriptions,
      webhook_url: 'https://fijbvihinhuedkvkxwir.supabase.co/functions/v1/facebook-webhook',
      instructions: [
        '1. Certifique-se de que sua p√°gina est√° verificada no Facebook',
        '2. O webhook deve estar configurado na aplica√ß√£o Facebook',
        '3. A p√°gina deve estar subscrita aos eventos de mensagens',
        '4. Teste enviando uma mensagem para a p√°gina'
      ]
    };

    return new Response(JSON.stringify(result), {
      headers: { 'Content-Type': 'application/json', ...corsHeaders },
    });

  } catch (error) {
    console.error('‚ùå Erro ao configurar webhook:', error);
    
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message,
      troubleshooting: [
        'Verifique se o token da p√°gina tem permiss√µes corretas',
        'Confirme se a aplica√ß√£o Facebook est√° aprovada',
        'Certifique-se de que a p√°gina est√° vinculada √† aplica√ß√£o',
        'Teste o webhook manualmente no Facebook Developer Console'
      ]
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', ...corsHeaders },
    });
  }
});